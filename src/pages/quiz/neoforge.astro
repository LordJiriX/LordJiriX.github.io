---
---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Minecraft Neoforge 1.21.X Quiz</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #222;
            color: #fff;
            text-align: center;
            padding: 20px;
        }
        .container {
            max-width: 600px;
            margin: auto;
            background: #333;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 0px 10px rgba(255, 255, 255, 0.2);
        }
        h1 {
            color: #ffcc00;
        }
        .question {
            font-size: 20px;
            margin-bottom: 10px;
        }
        .options button {
            background: #ffcc00;
            border: none;
            padding: 10px;
            margin: 5px;
            cursor: pointer;
            font-size: 16px;
            border-radius: 5px;
            transition: 0.3s;
        }
        .options button:hover {
            background: #ffaa00;
        }
        .score {
            font-size: 18px;
            margin-top: 20px;
        }
        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Minecraft Neoforge 1.21.x Quiz</h1>
        <p id="question" class="question"></p>
        <div id="options" class="options"></div>
        <button id="nextBtn" class="hidden" onclick="nextQuestion()">Next</button>
        <p id="score" class="score"></p>
        <p id="result" class="hidden"></p>
    </div>

    <script>
        const questions = [
            { question: "Which method is typically used to register custom blocks in NeoForge?", options: ["registerBlocks()", "ModBlocks.init()", "Through DeferredRegister<Block>", "With GameRegistry.registerBlock()"], answer: "Through DeferredRegister<Block>" },
            { question: "What event should you subscribe to for adding server-side commands?", options: ["ServerStartEvent", "RegisterCommandsEvent", "CommandInitEvent", "ServerCommandEvent"], answer: "RegisterCommandsEvent" },
            { question: "Which lifecycle event is best for initializing client-side renderers?", options: ["FMLClientSetupEvent", "FMLCommonSetupEvent", "FMLConstructModEvent", "RenderInitEvent"], answer: "FMLClientSetupEvent" },
            { question: "What is the correct way to handle networking in NeoForge?", options: ["Use SimpleChannel from net.neoforged.neoforge.network", "Use PacketManager from minecraft.networking", "Directly write TCP packets", "NeoForge does not support custom packets"], answer: "Use SimpleChannel from net.neoforged.neoforge.network" },
             { question: "How are capabilities registered in NeoForge ?", options: [" Using CapabilityManager.INSTANCE.register()", "With CapabilityToken<> and EventSubscriber", "Using ForgeCapabilities.register()", "Capabilities are deprecated"], answer: "With CapabilityToken<> and EventSubscriber" },
             { question: "Which file controls mod dependencies in NeoForge?", options: ["modinfo.json", "mod.properties", "mods.toml", "dependencies.neoforge"], answer: "mods.toml" },
             
        ];

        let currentQuestion = 0;
        let score = 0;

        function showQuestion() {
            const q = questions[currentQuestion];
            document.getElementById("question").innerText = q.question;
            const optionsDiv = document.getElementById("options");
            optionsDiv.innerHTML = "";
            document.getElementById("nextBtn").classList.add("hidden");
            document.getElementById("result").classList.add("hidden");
            
            q.options.forEach(option => {
                const btn = document.createElement("button");
                btn.innerText = option;
                btn.onclick = () => checkAnswer(option, btn);
                optionsDiv.appendChild(btn);
            });
        }

        function checkAnswer(option, btn) {
            if (option === questions[currentQuestion].answer) {
                score++;
                btn.style.backgroundColor = "#00cc66";
            } else {
                btn.style.backgroundColor = "#cc0000";
            }
            document.getElementById("score").innerText = `Score: ${score}/${questions.length}`;
            document.getElementById("nextBtn").classList.remove("hidden");
        }

        function nextQuestion() {
            if (currentQuestion + 1 < questions.length) {
                currentQuestion++;
                showQuestion();
            } else {
                finishQuiz();
            }
        }

        function finishQuiz() {
            document.getElementById("question").innerText = "Quiz done";
            document.getElementById("options").innerHTML = "";
            document.getElementById("nextBtn").classList.add("hidden");

            let resultText = "";
            if (score === questions.length) {
                resultText = "Perfect you done best!";
            } else if (score > questions.length / 2) {
                resultText = "Good score but try be better";
            } else {
                resultText = "Try learn NeoForge";
            }

            document.getElementById("result").innerText = resultText;
            document.getElementById("result").classList.remove("hidden");
        }

        showQuestion();
    </script>
</body>
</html>
      
